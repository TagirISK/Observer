package main

import (
	"fmt"
	"log"
	"math/rand"
)

func main() {

	var p Publisher

	p = newPublisher()
	p.broadcast("Hello, visitor of our pretty hotel Eleon")

	v := newVisitor("Mr.Viktor")
	v2 := newVisitor("Mr.Mikhail Jekovich")
	p.addVisitor(v)
	p.addVisitor(v2)
	p.broadcast("Good Evening our favorite visitor. ")

	p.removeVisitor(v.id())
	p.broadcast("Hello again our favorite visitor")

	a := newAutogenerateIdVisitor()

	p.addVisitor(a)
	p.broadcast("Good Morning, our Deputy Manager of the Hotel.")
}

type Publisher interface {
	addVisitor(visitor Visitor)
	removeVisitor(subId string)
	broadcast(msg string)
}

type Visitor interface {
	id() string
	react(msg string)
}

type publisher struct {
	visitors map[string]Visitor
}

func newPublisher() publisher {
	return publisher{visitors: make(map[string]Visitor)}
}

func (p publisher) addVisitor(visitor Visitor) {
	p.visitors[visitor.id()] = visitor
}

func (p publisher) removeVisitor(subId string) {
	delete(p.visitors, subId)
}

func (p publisher) broadcast(msg string) {
	for _, visitor := range p.visitors {
		visitor.react(msg)
	}
}

// Implementation > Visitor
type visitor struct {
	subId string
}

func newVisitor(subId string) visitor {
	return visitor{subId: subId}
}

func (v visitor) id() string {
	return v.subId
}

func (v visitor) react(msg string) {
	log.Printf("ID %v - received : %v", v.subId, msg)
}

// Implementation = Auto-generated
type autogenerateVisitor struct {
	subId string
}

func newAutogenerateIdVisitor() *autogenerateVisitor {
	return &autogenerateVisitor{
		subId: fmt.Sprint(rand.Int()),
	}
}

func (a autogenerateVisitor) id() string {
	return a.subId
}

func (a autogenerateVisitor) react(msg string) {

	log.Printf("ID %v - autogeneratedId received : %v", a.subId, msg)
}
